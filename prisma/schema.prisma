generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.VarChar(255)
  expiresAt DateTime
}

model User {
  id             Int       @id @default(autoincrement())
  name           String
  email          String    @unique
  password       String
  admin          Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
  imgUrl         String? 
  createdComment Comment[] @relation("CreatedComment")
  deletedComment Comment[] @relation("DeletedComment")
  createdPost    Post[]    @relation("CreatedPost")
  publishedPost  Post[]    @relation("PublishedPost")
  updatedPost    Post[]    @relation("UpdatedPost")
  createdTag     Tag[]     @relation("CreatedTag")
  deletedTag     Tag[]     @relation("DeletedTag")
  updatedTag     Tag[]     @relation("UpdatedTag")
}

model Post {
  id              Int       @id @default(autoincrement())
  title           String
  numberOfViews   Int       @default(0)
  numberOfShares  Int       @default(0)
  numberOfLikes   Int       @default(0) 
  published       Boolean   @default(false)
  publishedAt     DateTime?
  publishedById   Int?
  createdAt       DateTime  @default(now())
  createdById     Int
  updatedAt       DateTime  @default(now())
  updatedById     Int?
  content         Json
  metaDescription String?
  metaKeywords    String?
  slug            String?
  comment         Comment[] @relation("PostComment")
  createdByUser   User      @relation("CreatedPost", fields: [createdById], references: [id])
  publishedBy     User?     @relation("PublishedPost", fields: [publishedById], references: [id])
  updatedByUser   User?     @relation("UpdatedPost", fields: [updatedById], references: [id])
  tags            Tag[]     @relation("PostTag")
}

model Comment {
  id            Int       @id @default(autoincrement())
  comment       String
  postId        Int
  createdAt     DateTime  @default(now())
  createdById   Int?
  deletedAt     DateTime?
  deletedById   Int?
  createdByUser User?     @relation("CreatedComment", fields: [createdById], references: [id])
  DeletedByUser User?     @relation("DeletedComment", fields: [deletedById], references: [id])
  post          Post      @relation("PostComment", fields: [postId], references: [id])
}

model Tag {
  id            Int       @id @default(autoincrement())
  name          String
  createdAt     DateTime  @default(now())
  createdById   Int
  updatedAt     DateTime  @default(now())
  updatedById   Int?
  deletedAt     DateTime?
  deletedById   Int?
  createdByUser User      @relation("CreatedTag", fields: [createdById], references: [id])
  DeletedByUser User?     @relation("DeletedTag", fields: [deletedById], references: [id])
  updatedByUser User?     @relation("UpdatedTag", fields: [updatedById], references: [id])
  PostTag       Post[]    @relation("PostTag")
}
